write.table(tidy_data_ordered, file="tidy_data.txt", row.names=FALSE)
names(dataset_mean_sd_join) <- gsub("^t", "time", names(dataset_mean_sd_join))
names(dataset_mean_sd_join) <- gsub("^f", "frequency", names(dataset_mean_sd_join))
names(dataset_mean_sd_join) <- gsub("Acc", "Accelerometer", names(dataset_mean_sd_join))
names(dataset_mean_sd_join) <- gsub("Gyro", "Gyroscope", names(dataset_mean_sd_join))
names(dataset_mean_sd_join)<-gsub("Mag", "Magnitude", names(dataset_mean_sd_join))
tidy_data <- aggregate(dataset_mean_sd_join[2:80],
dataset_mean_sd_join[c("subject", "activity","activity_label")], mean)
tidy_data_ordered <- tidy_data[order(tidy_data$subject, tidy_data$activity ),]
write.table(tidy_data_ordered, file="tidy_data.txt", row.names=FALSE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "quiz3q1.txt")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "quiz3q1.csv" method="wget")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "quiz3q1.csv", method="wget")
data <- read.csv("quiz3q1.csv")
head(data)
tail(data)
str(data)
data$ACR == 3
agricultureLogical <- data$ACR == 3 and data$AGS == 6
agricultureLogical <- (data$ACR == 3 and data$AGS == 6)
agricultureLogical <- (data$ACR == 3 & data$AGS == 6)
agricultureLogical
data[witch(agricultureLogical)]
data[which(agricultureLogical)]
data[which(agricultureLogical),]
top(data[which(agricultureLogical),])
head(data[which(agricultureLogical),])
head(data)
head(data[which(agricultureLogical),])
install.packages("jpeg")
library(jpeg)
jdata <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "jpegdata.jpg", method = "wget")
jdata <- readJPEG("jpegdata.jpg")
jdata <- readJPEG("jpegdata.jpg", native = TRUE)
head(jdata)
quantile(jdata, probs = c(0.3, 0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "data1.csv", method= "wget")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "data1.csv", method= "wget")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "data2", method = "wget")
data1 <- read.csv("data1.csv")
data2 <- read.csv("data2")
head(data1)
head(data2)
str(data1)
str(data2)
mdata <- merge(data1, data2, by.x="X", by.y="CoutryCode", all= FALSE)
mdata <- merge(data1, data2, by.x="X", by.y="CountryCode", all= FALSE)
mdata <- merge(data1, data2, by.x="X", by.y="CountryCode")
View(mdata)
View(data1)
View(data1)
head(data1)
data1 <- read.csv("data1.csv", skip=5 header=F)
data1 <- read.csv("data1.csv", skip=5, header=F)
head(data1)
mdata <- merge(data1, data2, by.x="X", by.y="CountryCode", sort = T)
mdata <- merge(data1, data2, by.x="V1", by.y="CountryCode", sort = T)
mdata
View(data2)
View(data1)
tail(data2)
tail(data1)
data1 <- data1[1:231,]
data1
View(data1)
data1 < data1[data1$V1 != ""]
data1 <- data1[data1$V1 != ""]
data1 <- data1[data1$V1 != "",]
data1
mdata <- merge(data1, data2, by.x="V1", by.y="CountryCode", sort = T)
View(mdata)
View(mdata)
mdata[order(mdata$V2)]
mdata[order(mdata$V2),]
sort_mdata <- mdata[order(mdata$V2),]
View(sort_mdata)
mdata$V2 <- as.numeric(mdata$V2)
sort_mdata <- mdata[order(mdata$V2),]
View(sort_mdata)
View(data1)
sort_mdata <- mdata[order(mdata$V5),]
View(sort_mdata)
mdata$V5 <- as.numeric(mdata$V5)
sort_mdata <- mdata[order(mdata$V5),]
View(sort_mdata)
View(data1)
num_data <- as.numeric(data1$V5)
num_data
data$V5
data1$V5
mode(data1$V5)
sort_mdata <- mdata[order(mdata$V5),]
mdata <- merge(data1, data2, by.x="V1", by.y="CountryCode", sort = T)
sort_mdata <- mdata[order(mdata$V5),]
View(sort_mdata)
mode(sort_mdata$V5)
sort_mdata$V5
combine <- mdata[with(mdata, order(-V2))]
sum(!is.na(unique(mdata$rankingGDP)))
sum(!is.na(unique(mdata$V2)))
mdata[order(mdata$V2),]
mdata[order(mdata$V2),list(CountryCode)]
mdata[order(mdata$V2), mdata$CountryCode]
ddd <- mdata[order(mdata$V2), ]
ddd
View(ddd)
mean(mdata[mdata$Income.Group=='High income: OECD',]$V2)
mdata$Income.Group
mdata[mdata$Income.Group=='High income: OECD',]$V2
mean(mdata[mdata$Income.Group=='High income: OECD',]$V2)
mdata[mdata$Income.Group=='High income: OECD',]$V2
mdata$V2
View(mdata)
mdata <- mdata[mdata$V2 !=""]
mdata <- mdata[mdata$V2 !="",]
mdata[mdata$Income.Group=='High income: OECD',]$V2
mean(mdata[mdata$Income.Group=='High income: OECD',]$V2)
mean(as.numeric(mdata[mdata$Income.Group=='High income: OECD',]$V2)
)
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP.csv'
download.file(file.url, file.dest )
download.file(file.url, file.dest , method = "wget")
rowNames <- seq(10,200, 2)
gdp <- read.csv('GDP.csv', header=F, skip=5, nrows=190)
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
file.dest <- 'GDP2.csv'
download.file(file.url, file.dest , method = "wget")
fed <- read.csv('GDP2.csv')
combined <- merge(gdp, fed, by.x='V1', by.y='CountryCode', sort=TRUE)
combined[with(combined, order(-V2) )]
combined[with(combined, order(V2) )]
combined[with(combined, order(V2) ),]
combined[with(combined, order(-V2) ),]
mean(combined[combined$Income.Group=='High income: OECD',]$V2)
mean(combined[combined$Income.Group=='High income: nonOECD',]$V2)
quentile <- c(0.2,0.4,0.6,0.8,1)
q <- quantile(combined$V2, quentile)
q1 <- combined$V2 <= 38
xtabs(q1 ~ combined$Income.Group)
library(swrl)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "aaa.csv", method = "wget")
dd <- read.csv("aaa.csv")
head(dd)
str(dd)
tail(dd)
names(dd)[123]
strsplit(names(dd)[123], "wgtp")
library(swirl)
swirl()
mydf <- read.csv(path2csv, as.is = !stringAsFactors)
mydf <- read.csv(path2csv, as.is = !stringsAsFactors)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cra, ip_id, package, country)
select(cran, ip_id, package, country)
cran[5:20]
5:20
select(cran, r_arch:country)
select(cran, country;r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X))
select(cran, -(20))
info()
select(cran, -(5:20))
select(cran, -(1:11))
select(cran, -(11))
select(cran, -(X:11))
select(cran, -(10))
select(cran, -10)
select(cran, -(5))
select(cran, -(X))
select(cran, -(X:country))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?comparison
?Comparison
?Comparison
?"Comparison"
"?Comparison"
filter(cran, r_version == "3.1.1", country == "IN")
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3, 5, NA, 10)
)
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size <= 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
libraly(swirl)
library(swirl)
swirl()
library(dplyr)
tbl_df()
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
py_package
by_package
?summarize
summarize(by_package)
summarize(by_package, mean(size))
submit()
?submit
submit()
submit(by_package)
library(swirl)
swirl()
summarize()
rest()
reset()
swirl()
submit()
View(pack_sum)
tbl
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
swirl()
library(swirl
)
swirl()
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
library(swirl)
swirl()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
gather(students)
?gather
gather(students, sex, count, -grade)
swir()
swirl()
library(swirl)
swirl()
sutdents2
students2
?gather
gather(students2, sex_class, count)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
?mutate
submit()
submit()
submit()
extract_numeric("class5","class4")
extract_numeric(c("class5","class4")
)
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion('dplyr')
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
exit
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data=airquality)
str(airquality)
xyplot(Ozone ~ Wind | Temp, data=airquality)
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | factor(Month), data=airquality, layout=c(5,1))
p <- xyplot(Ozone ~ Wind | factor(Month), data=airquality, layout=c(5,1))
class(p)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(nlme)
library(lattice)
xyplot(weight , Time | Diet, BodyWeight)
xyplot(Weight , Time | Diet, BodyWeight)
xyplot(weight , Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
library(ggplot1)
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
p <- qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
print(p)
g <- ggplot(movies, aes(votes, rating))
print(g)
ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies) + geom_smooth()
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each=4), sd=0.2)
x
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd=0.2)
y
plot(x, y, col="blue", pch=2, cex=2)
plot(x, y, col="blue", pch=19, cex=2)
text(x + 0.05, y + 0.05, labels=as.character(1:12))
a <- rep(1:3, each=4)
a
dataframe <- data.frame(x=x, y=y)
dataframe
dist(dataframe)
distxy <- dist(dataframe)
distxy
hClustering <- hclust(distxy)
plot(hClustering)
heatmap(hClustering)
datam <- as.matrix(dataframe)[sample(1:12),]
heatmap(datam)
library(swirl)
swirl()
head(pollution)
dim(pollution)
summmary(pollution$pm25)
summary(pollution$pm25)
quantile(pollution$pm25)
quqntile(ppm)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(c=median(ppm), col="magenta", lwd=4)
abline(v=median(ppm), col="magenta", lwd=4)
head(pollution$pm25)
head(pollution)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number 0f Counties in Each Region")
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region = "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col="green")
west <- subset(pollution, region == "west")
hist(subset(pollution, region=="west")$pm25, col="green")
with(pollution, plot(latitude, pm25))
abline(lwd=2, lty=2)
abline(h=12, lwd=2, lty=2)
plot(polution$latitude, pollution$ppm, col=pollution$region)
plot(pollution$latitude, pollution$ppm, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, coutries="west")
west <- subset(pollution, region="west")
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
east <- subset(pollution, region=="east")
plot(east$latitude, eastt$pm25, main="East")
plot(east$latitude, east$pm25, main="East")
exit
quit
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean=rep(1:3, each=4),sd=0.2)
x
y <- rnorm(12, mean=rep(c(1,2,1), each=4),sd=0.2)
dataFrame <- data.frame(x=x, y=y)
dataFrame
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
dataMatrix
heatmap(dataMatrix)
system.time(al.2008 <- read.csv("data/2008.csv", as.is=T))
sapply(al.2008, class)
print(object.size(al.2008), units="Mb")
head(al.2008)
tail(al.2008)
summary(al.2008)
install.packages("knitr")
cc <- sapply(al.2008, class)
cc
is.char <- cc == "character"
is.char
al.2008.fac <- al.2008
al.2008.fac[,is.char] <- lapply(al.2008.fac[, is.char], as.factor)
summary(al.2008.fac)
setwd("~/Coursera/Reproducible Research/RepData_PeerAssessment1")
new_activity_data <- activity_data
f <- function(x){
if (is.na(x[1])) {
result <- average_daily_activity[
average_daily_activity$interval == as.integer(x[3]),2]
} else {
result <- x[1]
}
as.numeric(result)
}
new_activity_data$steps <- apply(new_activity_data, 1, f)
average_daily_activity <- aggregate(steps~interval, activity_data, mean)
new_activity_data$steps <- apply(new_activity_data, 1, f)
c <- activity_data
c$process <= "yes"
c$process <- "yes"
str(c)
c$process <- "no"
str(c)
new_activity_data$process <- "yes"
d <- rbind(c, new_activity_data)
library(ggplot2)
ggplot(g, aes(x= steps), fill=process) + geom_histogram()
ggplot(d, aes(x= steps), fill=process) + geom_histogram()
ggplot(d, aes(x= steps), fill=process) + geom_histogram(alpha=0.5, position="identity")
str(d)
summary(d)
c$process <- as.factor("no")
new_activity_data$process <- as.factor("yes")
d <- rbind(c, new_activity_data)
ggplot(d, aes(x= steps), fill=process) + geom_histogram(alpha=0.5, position="identity")
steps_per_day <- aggregate(steps~date, activity_data, sum)
new_steps_per_day <- aggregate(steps~date, new_activity_data, sum)
steps_per_day$process <- as.factor("no")
new_steps_per_day$process <- as.factor("yes")
eee <- rbind(steps_per_day, new_steps_per_day)
str(eee)
ggplot(eee, aes(x=steps, fill=process)) + geom_histogram(aplpa=0.5, position="identity")
eee <- rbind(new_steps_per_day, steps_per_day)
ggplot(eee, aes(x=steps, fill=process)) + geom_histogram(aplpa=0.5, position="identity")
ggplot(eee, aes(x=steps, fill=process)) + geom_histogram(alpha=0.5, position="identity")
